【作用】
	* 用来计算一段代码执行n次的耗时时间 

【模块代码】
	* timeit模块定义了两个函数，他们都会构建出一个 Timer 类并且执行了timeit函数，返回执行的时间

	def timeit(stmt="pass", setup="pass", timer=default_timer,number=default_number):
    		"""Convenience function to create Timer object and call timeit method."""
    		return Timer(stmt, setup, timer).timeit(number)
 
	def repeat(stmt="pass", setup="pass", timer=default_timer,
                   repeat=default_repeat, number=default_number):
    		"""Convenience function to create Timer object and call repeat method."""
    		return Timer(stmt, setup, timer).repeat(repeat, number)

	* 参数说明
	
	stmt: 这个参数就是statement,可以把要进行计算时间的代码放在里面。他可以直接接受字符串的表达式，也可以	      接受单个变量，也可以接受函数。

　　	setup:  这个参数可以将stmt的环境传进去。比如各种import和参数什么的。因为从内部将，timeit构建了
		一个独立的环境，所以需要导入函数。

　　	timer: 这个参数一般使用不到，具体使用可以参看文档。

	repeat：测试多少次

	number：一次测试执行多少次测试代码，默认为100万次

【使用方法】
	import timeit

	time = timeit.timeit(stmt=‘[i for i in range(1000)]’, number=10000)
	# 返回测试代码执行10000次所耗时间

	time = timeit.repeat(stmt=‘function()’, setup=‘from __main__ import function’,
     			     repeat=2, number=10000)
	# 返回一个列表，分别是测试了两次的时间，每次测试执行了10000次，通常用 min 来取最快的一次

【使用方法2】
	import timeit

	timer = timeit.Timer(‘function()’, ‘from __main__ import function’)
	timer.timeit(10000)
